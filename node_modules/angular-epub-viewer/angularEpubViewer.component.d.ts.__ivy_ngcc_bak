import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { EpubChapter, EpubError, EpubLocation, EpubMetadata, EpubPage, EpubSearchResult } from "./angularEpubViewer.models";
import 'rxjs/add/operator/filter';
/**
 * AngularEpubViewer component
 */
export declare class AngularEpubViewerComponent implements AfterViewInit, OnDestroy {
    private zone;
    /**
     * Root container's DOM reference
     */
    root: ElementRef;
    /**
     * Primary object
     */
    epub: any;
    /**
     * Current location of document's rendered part
     */
    currentLocation: EpubLocation;
    /**
     * Indicates whenever document is ready
     */
    documentReady: boolean;
    /**
     * Indicates whenever chapter is displayed
     */
    isChapterDisplayed: boolean;
    /**
     * Indicates whenever pagination is computing
     */
    computingPagination: boolean;
    /**
     * Indicates whenever searching text
     */
    searchingText: boolean;
    /**
     * Root container's padding in px, em, etc.
     */
    padding: string;
    /**
     * Enables auto calculate of pagination after document is ready or viewport has been changed
     */
    autoPagination: boolean;
    /**
     * Enables auto loading of metadata after document is ready
     */
    autoMetadata: boolean;
    /**
     * Enables auto loading of table of contents after document is ready
     */
    autoTOC: boolean;
    /**
     * Get event when document is loaded
     */
    onDocumentReady: EventEmitter<void>;
    /**
     * Get event when chapter is unloaded
     */
    onChapterUnloaded: EventEmitter<void>;
    /**
     * Get event when chapter is displayed
     */
    onChapterDisplayed: EventEmitter<EpubChapter>;
    /**
     * Get event about the current location
     */
    onLocationFound: EventEmitter<EpubLocation>;
    /**
     * Get event about search results
     */
    onSearchFinished: EventEmitter<EpubSearchResult[]>;
    /**
     * Get event about pagination
     */
    onPaginationComputed: EventEmitter<EpubPage[]>;
    /**
     * Get event about metadata
     */
    onMetadataLoaded: EventEmitter<EpubMetadata>;
    /**
     * Get event about table of contents
     */
    onTOCLoaded: EventEmitter<EpubChapter[]>;
    /**
     * Get event when any error occurred
     */
    onErrorOccurred: EventEmitter<EpubError>;
    /**
     * Starts loading document by link only after DOM is ready
     */
    private _link;
    private linkSubscription;
    private needSearchText;
    private needComputePagination;
    constructor(zone: NgZone);
    ngAfterViewInit(): void;
    private initEpub;
    /**
     * Opens EPUB document by link
     * @param link
     */
    openLink(link: string): void;
    /**
     * Opens EPUB document file
     * @param file
     */
    openFile(file: File): void;
    /**
     * Navigates to the specified url or EPUB CFI or page
     * @param location
     */
    goTo(location: string | number): void;
    /**
     * Navigates to the next page
     */
    nextPage(): void;
    /**
     * Navigates to the previous page
     */
    previousPage(): void;
    /**
     * Searches all text matches *in the current chapter*
     * @param text
     */
    searchText(text: string): void;
    /**
     * Adds style to be attached to the document's body element
     * @param style
     * @param value
     */
    setStyle(style: string, value: string): void;
    /**
     * Removes a style from the rendered document
     * @param style
     */
    resetStyle(style: string): void;
    /**
     * Calculates pagination as output event
     */
    computePagination(): void;
    /**
     * Loads metadata as output event
     */
    loadMetadata(): void;
    /**
     * Loads table of contents as output event
     */
    loadTOC(): void;
    private destroyEpub();
    ngOnDestroy(): void;
}
