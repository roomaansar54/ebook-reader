(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/BehaviorSubject'), require('rxjs/add/operator/filter')) :
	typeof define === 'function' && define.amd ? define('angular-epub-viewer', ['exports', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/add/operator/filter'], factory) :
	(factory((global['angular-epub-viewer'] = {}),global.ng.core,global.Rx));
}(this, (function (exports,core,BehaviorSubject) { 'use strict';

var EpubError = {
    OPEN_FILE: 0,
    READ_FILE: 1,
    NOT_LOADED_DOCUMENT: 2,
    NOT_DISPLAYED_CHAPTER: 3,
    SEARCH: 4,
    COMPUTE_PAGINATION: 5,
    LOAD_METADATA: 6,
    LOAD_TOC: 7,
};
EpubError[EpubError.OPEN_FILE] = "OPEN_FILE";
EpubError[EpubError.READ_FILE] = "READ_FILE";
EpubError[EpubError.NOT_LOADED_DOCUMENT] = "NOT_LOADED_DOCUMENT";
EpubError[EpubError.NOT_DISPLAYED_CHAPTER] = "NOT_DISPLAYED_CHAPTER";
EpubError[EpubError.SEARCH] = "SEARCH";
EpubError[EpubError.COMPUTE_PAGINATION] = "COMPUTE_PAGINATION";
EpubError[EpubError.LOAD_METADATA] = "LOAD_METADATA";
EpubError[EpubError.LOAD_TOC] = "LOAD_TOC";
var AngularEpubViewerComponent = /** @class */ (function () {
    function AngularEpubViewerComponent(zone) {
        var _this = this;
        this.zone = zone;
        this.epub = null;
        this.currentLocation = {
            startCfi: null,
            endCfi: null,
            page: null,
            chapter: null
        };
        this.documentReady = false;
        this.isChapterDisplayed = false;
        this.computingPagination = false;
        this.searchingText = false;
        this.padding = null;
        this.autoPagination = false;
        this.autoMetadata = false;
        this.autoTOC = false;
        this.onDocumentReady = new core.EventEmitter();
        this.onChapterUnloaded = new core.EventEmitter();
        this.onChapterDisplayed = new core.EventEmitter();
        this.onLocationFound = new core.EventEmitter();
        this.onSearchFinished = new core.EventEmitter();
        this.onPaginationComputed = new core.EventEmitter();
        this.onMetadataLoaded = new core.EventEmitter();
        this.onTOCLoaded = new core.EventEmitter();
        this.onErrorOccurred = new core.EventEmitter();
        this._link = new BehaviorSubject.BehaviorSubject(null);
        this.needSearchText = null;
        this.needComputePagination = false;
        this.initEpub = function (properties) {
            _this.destroyEpub();
            _this.epub = ePub(properties);
            _this.epub.on('book:ready', function () {
                _this.zone.run(function () {
                    _this.documentReady = true;
                    _this.onDocumentReady.next(null);
                    if (_this.autoPagination) {
                        _this.needComputePagination = true;
                    }
                    if (_this.autoMetadata) {
                        _this.loadMetadata();
                    }
                    if (_this.autoTOC) {
                        _this.loadTOC();
                    }
                });
            });
            _this.epub.on('book:pageChanged', function (location) {
                _this.zone.run(function () {
                    if (!_this.computingPagination) {
                        _this.currentLocation.page = location.anchorPage;
                        _this.onLocationFound.next(_this.currentLocation);
                    }
                });
            });
            _this.epub.on('renderer:chapterUnloaded', function () {
                _this.zone.run(function () {
                    _this.isChapterDisplayed = false;
                    _this.onChapterUnloaded.next(null);
                });
            });
            _this.epub.on('renderer:chapterDisplayed', function (chapter) {
                _this.zone.run(function () {
                    _this.isChapterDisplayed = true;
                    chapter['label'] = null;
                    _this.onChapterDisplayed.next(chapter);
                    _this.currentLocation.chapter = chapter;
                    _this.onLocationFound.next(_this.currentLocation);
                    if (_this.needComputePagination) {
                        _this.computePagination();
                    }
                });
            });
            _this.epub.on('renderer:resized', function () {
                _this.zone.run(function () {
                    _this.needComputePagination = true;
                    if (_this.autoPagination) {
                        _this.computePagination();
                    }
                });
            });
            _this.epub.on('renderer:visibleRangeChanged', function (range) {
                _this.zone.run(function () {
                    _this.currentLocation.startCfi = range.start;
                    _this.currentLocation.endCfi = range.end;
                    _this.onLocationFound.next(_this.currentLocation);
                });
            });
            _this.epub.renderTo('angularEpubViewerComponent');
        };
    }
    AngularEpubViewerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.linkSubscription = this._link.asObservable()
            .filter(function (link) { return link != null; })
            .subscribe(function (link) {
            _this.initEpub({
                bookPath: link
            });
        });
    };
    AngularEpubViewerComponent.prototype.openLink = function (link) {
        this._link.next(link);
    };
    AngularEpubViewerComponent.prototype.openFile = function (file) {
        var _this = this;
        if (window['FileReader']) {
            this.zone.runOutsideAngular(function () {
                var reader = new FileReader();
                reader.onload = function () {
                    _this.zone.run(function () {
                        _this.initEpub({
                            bookPath: reader.result
                        });
                    });
                };
                reader.onerror = function () {
                    _this.zone.run(function () {
                        _this.onErrorOccurred.emit(EpubError.READ_FILE);
                    });
                };
                reader.readAsArrayBuffer(file);
            });
        }
        else {
            this.onErrorOccurred.emit(EpubError.OPEN_FILE);
        }
    };
    AngularEpubViewerComponent.prototype.goTo = function (location) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        if (typeof location === "number") {
            this.epub.displayChapter(location);
        }
        else if (/.*html$/.test(location)) {
            this.epub.goto(location);
        }
        else {
            this.epub.displayChapter(location);
        }
    };
    AngularEpubViewerComponent.prototype.nextPage = function () {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.nextPage();
    };
    AngularEpubViewerComponent.prototype.previousPage = function () {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.prevPage();
    };
    AngularEpubViewerComponent.prototype.searchText = function (text) {
        var _this = this;
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        if (!this.isChapterDisplayed) {
            this.onErrorOccurred.emit(EpubError.NOT_DISPLAYED_CHAPTER);
            return;
        }
        if (!text || text.trim().length <= 0) {
            this.onErrorOccurred.emit(EpubError.SEARCH);
            return;
        }
        if (this.searchingText) {
            this.needSearchText = text;
            return;
        }
        this.searchingText = true;
        this.needSearchText = null;
        this.zone.runOutsideAngular(function () {
            var results = _this.epub.currentChapter.find(text.trim());
            _this.zone.run(function () {
                _this.searchingText = false;
                if (_this.needSearchText) {
                    _this.searchText(_this.needSearchText);
                }
                else {
                    _this.onSearchFinished.next(results);
                }
            });
        });
    };
    AngularEpubViewerComponent.prototype.setStyle = function (style, value) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.setStyle(style, value);
    };
    AngularEpubViewerComponent.prototype.resetStyle = function (style) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.removeStyle(style);
    };
    AngularEpubViewerComponent.prototype.computePagination = function () {
        var _this = this;
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        if (!this.isChapterDisplayed) {
            this.onErrorOccurred.emit(EpubError.NOT_DISPLAYED_CHAPTER);
            return;
        }
        if (this.computingPagination) {
            return;
        }
        this.computingPagination = true;
        this.needComputePagination = false;
        this.zone.runOutsideAngular(function () {
            _this.epub.generatePagination()
                .then(function (pages) {
                var currentPage = _this.epub.pagination.pageFromCfi(_this.epub.getCurrentLocationCfi());
                _this.zone.run(function () {
                    _this.computingPagination = false;
                    if (_this.needComputePagination) {
                        _this.computePagination();
                    }
                    else {
                        _this.onPaginationComputed.next(pages);
                        _this.currentLocation.page = currentPage;
                        _this.onLocationFound.next(_this.currentLocation);
                    }
                });
            })
                .catch(function () {
                _this.zone.run(function () {
                    _this.computingPagination = false;
                    _this.onErrorOccurred.emit(EpubError.COMPUTE_PAGINATION);
                });
            });
        });
    };
    AngularEpubViewerComponent.prototype.loadMetadata = function () {
        var _this = this;
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.zone.runOutsideAngular(function () {
            _this.epub.getMetadata()
                .then(function (metadata) {
                _this.zone.run(function () {
                    _this.onMetadataLoaded.next(metadata);
                });
            })
                .catch(function () {
                _this.zone.run(function () {
                    _this.onErrorOccurred.emit(EpubError.LOAD_METADATA);
                });
            });
        });
    };
    AngularEpubViewerComponent.prototype.loadTOC = function () {
        var _this = this;
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.zone.runOutsideAngular(function () {
            _this.epub.getToc()
                .then(function (chapters) {
                _this.zone.run(function () {
                    _this.onTOCLoaded.next(chapters);
                });
            })
                .catch(function () {
                _this.zone.run(function () {
                    _this.onErrorOccurred.emit(EpubError.LOAD_TOC);
                });
            });
        });
    };
    AngularEpubViewerComponent.prototype.destroyEpub = function () {
        this.documentReady = false;
        this.isChapterDisplayed = false;
        this.searchingText = false;
        this.needSearchText = null;
        this.computingPagination = false;
        this.needComputePagination = false;
        this.currentLocation = {
            startCfi: null,
            endCfi: null,
            page: null,
            chapter: null
        };
        if (this.epub) {
            this.epub.destroy();
            this.epub = null;
        }
    };
    AngularEpubViewerComponent.prototype.ngOnDestroy = function () {
        if (this.linkSubscription) {
            this.linkSubscription.unsubscribe();
        }
        this.destroyEpub();
    };
    return AngularEpubViewerComponent;
}());
AngularEpubViewerComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'angular-epub-viewer',
                template: "<div id=\"angularEpubViewerComponent\" [style.padding]=\"padding\" #angularEpubViewerComponent></div>",
                styles: ["\n        #angularEpubViewerComponent {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            overflow: hidden;\n        }\n    "],
                encapsulation: core.ViewEncapsulation.None
            },] },
];
AngularEpubViewerComponent.ctorParameters = function () { return [
    { type: core.NgZone, },
]; };
AngularEpubViewerComponent.propDecorators = {
    "root": [{ type: core.ViewChild, args: ['angularEpubViewerComponent', { read: core.ElementRef },] },],
    "padding": [{ type: core.Input },],
    "autoPagination": [{ type: core.Input },],
    "autoMetadata": [{ type: core.Input },],
    "autoTOC": [{ type: core.Input },],
    "onDocumentReady": [{ type: core.Output, args: ['onDocumentReady',] },],
    "onChapterUnloaded": [{ type: core.Output, args: ['onChapterUnloaded',] },],
    "onChapterDisplayed": [{ type: core.Output, args: ['onChapterDisplayed',] },],
    "onLocationFound": [{ type: core.Output, args: ['onLocationFound',] },],
    "onSearchFinished": [{ type: core.Output, args: ['onSearchFinished',] },],
    "onPaginationComputed": [{ type: core.Output, args: ['onPaginationComputed',] },],
    "onMetadataLoaded": [{ type: core.Output, args: ['onMetadataLoaded',] },],
    "onTOCLoaded": [{ type: core.Output, args: ['onTOCLoaded',] },],
    "onErrorOccurred": [{ type: core.Output, args: ['onErrorOccurred',] },],
};
var AngularEpubViewerModule = /** @class */ (function () {
    function AngularEpubViewerModule() {
    }
    return AngularEpubViewerModule;
}());
AngularEpubViewerModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [],
                declarations: [AngularEpubViewerComponent],
                exports: [AngularEpubViewerComponent]
            },] },
];

exports.AngularEpubViewerModule = AngularEpubViewerModule;
exports.AngularEpubViewerComponent = AngularEpubViewerComponent;
exports.EpubError = EpubError;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-epub-viewer.umd.js.map
