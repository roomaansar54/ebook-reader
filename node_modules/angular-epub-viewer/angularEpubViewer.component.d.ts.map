{"version":3,"file":"angularEpubViewer.component.d.ts","sources":["angularEpubViewer.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';\nimport { EpubChapter, EpubError, EpubLocation, EpubMetadata, EpubPage, EpubSearchResult } from \"./angularEpubViewer.models\";\nimport 'rxjs/add/operator/filter';\n/**\n * AngularEpubViewer component\n */\nexport declare class AngularEpubViewerComponent implements AfterViewInit, OnDestroy {\n    private zone;\n    /**\n     * Root container's DOM reference\n     */\n    root: ElementRef;\n    /**\n     * Primary object\n     */\n    epub: any;\n    /**\n     * Current location of document's rendered part\n     */\n    currentLocation: EpubLocation;\n    /**\n     * Indicates whenever document is ready\n     */\n    documentReady: boolean;\n    /**\n     * Indicates whenever chapter is displayed\n     */\n    isChapterDisplayed: boolean;\n    /**\n     * Indicates whenever pagination is computing\n     */\n    computingPagination: boolean;\n    /**\n     * Indicates whenever searching text\n     */\n    searchingText: boolean;\n    /**\n     * Root container's padding in px, em, etc.\n     */\n    padding: string;\n    /**\n     * Enables auto calculate of pagination after document is ready or viewport has been changed\n     */\n    autoPagination: boolean;\n    /**\n     * Enables auto loading of metadata after document is ready\n     */\n    autoMetadata: boolean;\n    /**\n     * Enables auto loading of table of contents after document is ready\n     */\n    autoTOC: boolean;\n    /**\n     * Get event when document is loaded\n     */\n    onDocumentReady: EventEmitter<void>;\n    /**\n     * Get event when chapter is unloaded\n     */\n    onChapterUnloaded: EventEmitter<void>;\n    /**\n     * Get event when chapter is displayed\n     */\n    onChapterDisplayed: EventEmitter<EpubChapter>;\n    /**\n     * Get event about the current location\n     */\n    onLocationFound: EventEmitter<EpubLocation>;\n    /**\n     * Get event about search results\n     */\n    onSearchFinished: EventEmitter<EpubSearchResult[]>;\n    /**\n     * Get event about pagination\n     */\n    onPaginationComputed: EventEmitter<EpubPage[]>;\n    /**\n     * Get event about metadata\n     */\n    onMetadataLoaded: EventEmitter<EpubMetadata>;\n    /**\n     * Get event about table of contents\n     */\n    onTOCLoaded: EventEmitter<EpubChapter[]>;\n    /**\n     * Get event when any error occurred\n     */\n    onErrorOccurred: EventEmitter<EpubError>;\n    /**\n     * Starts loading document by link only after DOM is ready\n     */\n    private _link;\n    private linkSubscription;\n    private needSearchText;\n    private needComputePagination;\n    constructor(zone: NgZone);\n    ngAfterViewInit(): void;\n    private initEpub;\n    /**\n     * Opens EPUB document by link\n     * @param link\n     */\n    openLink(link: string): void;\n    /**\n     * Opens EPUB document file\n     * @param file\n     */\n    openFile(file: File): void;\n    /**\n     * Navigates to the specified url or EPUB CFI or page\n     * @param location\n     */\n    goTo(location: string | number): void;\n    /**\n     * Navigates to the next page\n     */\n    nextPage(): void;\n    /**\n     * Navigates to the previous page\n     */\n    previousPage(): void;\n    /**\n     * Searches all text matches *in the current chapter*\n     * @param text\n     */\n    searchText(text: string): void;\n    /**\n     * Adds style to be attached to the document's body element\n     * @param style\n     * @param value\n     */\n    setStyle(style: string, value: string): void;\n    /**\n     * Removes a style from the rendered document\n     * @param style\n     */\n    resetStyle(style: string): void;\n    /**\n     * Calculates pagination as output event\n     */\n    computePagination(): void;\n    /**\n     * Loads metadata as output event\n     */\n    loadMetadata(): void;\n    /**\n     * Loads table of contents as output event\n     */\n    loadTOC(): void;\n    private destroyEpub();\n    ngOnDestroy(): void;\n}\n"]}