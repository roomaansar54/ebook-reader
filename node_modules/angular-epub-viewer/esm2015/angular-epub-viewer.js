import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/operator/filter';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/** @enum {number} */
const EpubError = {
    OPEN_FILE: 0,
    READ_FILE: 1,
    NOT_LOADED_DOCUMENT: 2,
    NOT_DISPLAYED_CHAPTER: 3,
    SEARCH: 4,
    COMPUTE_PAGINATION: 5,
    LOAD_METADATA: 6,
    LOAD_TOC: 7,
};
EpubError[EpubError.OPEN_FILE] = "OPEN_FILE";
EpubError[EpubError.READ_FILE] = "READ_FILE";
EpubError[EpubError.NOT_LOADED_DOCUMENT] = "NOT_LOADED_DOCUMENT";
EpubError[EpubError.NOT_DISPLAYED_CHAPTER] = "NOT_DISPLAYED_CHAPTER";
EpubError[EpubError.SEARCH] = "SEARCH";
EpubError[EpubError.COMPUTE_PAGINATION] = "COMPUTE_PAGINATION";
EpubError[EpubError.LOAD_METADATA] = "LOAD_METADATA";
EpubError[EpubError.LOAD_TOC] = "LOAD_TOC";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * AngularEpubViewer component
 */
class AngularEpubViewerComponent {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        /**
         * Primary object
         */
        this.epub = null;
        /**
         * Current location of document's rendered part
         */
        this.currentLocation = {
            startCfi: null,
            endCfi: null,
            page: null,
            chapter: null
        };
        /**
         * Indicates whenever document is ready
         */
        this.documentReady = false;
        /**
         * Indicates whenever chapter is displayed
         */
        this.isChapterDisplayed = false;
        /**
         * Indicates whenever pagination is computing
         */
        this.computingPagination = false;
        /**
         * Indicates whenever searching text
         */
        this.searchingText = false;
        /**
         * Root container's padding in px, em, etc.
         */
        this.padding = null;
        /**
         * Enables auto calculate of pagination after document is ready or viewport has been changed
         */
        this.autoPagination = false;
        /**
         * Enables auto loading of metadata after document is ready
         */
        this.autoMetadata = false;
        /**
         * Enables auto loading of table of contents after document is ready
         */
        this.autoTOC = false;
        /**
         * Get event when document is loaded
         */
        this.onDocumentReady = new EventEmitter();
        /**
         * Get event when chapter is unloaded
         */
        this.onChapterUnloaded = new EventEmitter();
        /**
         * Get event when chapter is displayed
         */
        this.onChapterDisplayed = new EventEmitter();
        /**
         * Get event about the current location
         */
        this.onLocationFound = new EventEmitter();
        /**
         * Get event about search results
         */
        this.onSearchFinished = new EventEmitter();
        /**
         * Get event about pagination
         */
        this.onPaginationComputed = new EventEmitter();
        /**
         * Get event about metadata
         */
        this.onMetadataLoaded = new EventEmitter();
        /**
         * Get event about table of contents
         */
        this.onTOCLoaded = new EventEmitter();
        /**
         * Get event when any error occurred
         */
        this.onErrorOccurred = new EventEmitter();
        /**
         * Starts loading document by link only after DOM is ready
         */
        this._link = new BehaviorSubject(null);
        this.needSearchText = null;
        this.needComputePagination = false;
        this.initEpub = (properties) => {
            this.destroyEpub();
            this.epub = ePub(properties);
            this.epub.on('book:ready', () => {
                this.zone.run(() => {
                    this.documentReady = true;
                    this.onDocumentReady.next(null);
                    if (this.autoPagination) {
                        this.needComputePagination = true;
                    }
                    if (this.autoMetadata) {
                        this.loadMetadata();
                    }
                    if (this.autoTOC) {
                        this.loadTOC();
                    }
                });
            });
            this.epub.on('book:pageChanged', (location) => {
                this.zone.run(() => {
                    if (!this.computingPagination) {
                        this.currentLocation.page = location.anchorPage;
                        this.onLocationFound.next(this.currentLocation);
                    }
                });
            });
            this.epub.on('renderer:chapterUnloaded', () => {
                this.zone.run(() => {
                    this.isChapterDisplayed = false;
                    this.onChapterUnloaded.next(null);
                });
            });
            this.epub.on('renderer:chapterDisplayed', (chapter) => {
                this.zone.run(() => {
                    this.isChapterDisplayed = true;
                    // no label attribute here
                    chapter['label'] = null;
                    this.onChapterDisplayed.next(chapter);
                    this.currentLocation.chapter = chapter;
                    this.onLocationFound.next(this.currentLocation);
                    if (this.needComputePagination) {
                        this.computePagination();
                    }
                });
            });
            this.epub.on('renderer:resized', () => {
                this.zone.run(() => {
                    this.needComputePagination = true;
                    if (this.autoPagination) {
                        this.computePagination();
                    }
                });
            });
            this.epub.on('renderer:visibleRangeChanged', range => {
                this.zone.run(() => {
                    // renderer:locationChanged is a part of this event
                    this.currentLocation.startCfi = range.start;
                    this.currentLocation.endCfi = range.end;
                    this.onLocationFound.next(this.currentLocation);
                });
            });
            this.epub.renderTo('angularEpubViewerComponent');
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.linkSubscription = this._link.asObservable()
            .filter(link => link != null)
            .subscribe(link => {
            this.initEpub({
                bookPath: link
            });
        });
    }
    /**
     * Opens EPUB document by link
     * @param {?} link
     * @return {?}
     */
    openLink(link) {
        this._link.next(link);
    }
    /**
     * Opens EPUB document file
     * @param {?} file
     * @return {?}
     */
    openFile(file) {
        if (window['FileReader']) {
            this.zone.runOutsideAngular(() => {
                const /** @type {?} */ reader = new FileReader();
                reader.onload = () => {
                    this.zone.run(() => {
                        this.initEpub({
                            bookPath: reader.result
                        });
                    });
                };
                reader.onerror = () => {
                    this.zone.run(() => {
                        this.onErrorOccurred.emit(EpubError.READ_FILE);
                    });
                };
                reader.readAsArrayBuffer(file);
            });
        }
        else {
            this.onErrorOccurred.emit(EpubError.OPEN_FILE);
        }
    }
    /**
     * Navigates to the specified url or EPUB CFI or page
     * @param {?} location
     * @return {?}
     */
    goTo(location) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        if (typeof location === "number") {
            // page
            this.epub.displayChapter(location);
        }
        else if (/.*html$/.test(location)) {
            // url
            this.epub.goto(location);
        }
        else {
            // EPUB CFI
            this.epub.displayChapter(location);
        }
    }
    /**
     * Navigates to the next page
     * @return {?}
     */
    nextPage() {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.nextPage();
    }
    /**
     * Navigates to the previous page
     * @return {?}
     */
    previousPage() {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.prevPage();
    }
    /**
     * Searches all text matches *in the current chapter*
     * @param {?} text
     * @return {?}
     */
    searchText(text) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        if (!this.isChapterDisplayed) {
            this.onErrorOccurred.emit(EpubError.NOT_DISPLAYED_CHAPTER);
            return;
        }
        if (!text || text.trim().length <= 0) {
            this.onErrorOccurred.emit(EpubError.SEARCH);
            return;
        }
        if (this.searchingText) {
            this.needSearchText = text;
            return;
        }
        this.searchingText = true;
        this.needSearchText = null;
        this.zone.runOutsideAngular(() => {
            const /** @type {?} */ results = this.epub.currentChapter.find(text.trim());
            this.zone.run(() => {
                this.searchingText = false;
                if (this.needSearchText) {
                    this.searchText(this.needSearchText);
                }
                else {
                    this.onSearchFinished.next(results);
                }
            });
        });
    }
    /**
     * Adds style to be attached to the document's body element
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    setStyle(style, value) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.setStyle(style, value);
    }
    /**
     * Removes a style from the rendered document
     * @param {?} style
     * @return {?}
     */
    resetStyle(style) {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.epub.removeStyle(style);
    }
    /**
     * Calculates pagination as output event
     * @return {?}
     */
    computePagination() {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        if (!this.isChapterDisplayed) {
            this.onErrorOccurred.emit(EpubError.NOT_DISPLAYED_CHAPTER);
            return;
        }
        if (this.computingPagination) {
            return;
        }
        this.computingPagination = true;
        this.needComputePagination = false;
        this.zone.runOutsideAngular(() => {
            this.epub.generatePagination()
                .then((pages) => {
                const /** @type {?} */ currentPage = this.epub.pagination.pageFromCfi(this.epub.getCurrentLocationCfi());
                this.zone.run(() => {
                    this.computingPagination = false;
                    if (this.needComputePagination) {
                        this.computePagination();
                    }
                    else {
                        this.onPaginationComputed.next(pages);
                        this.currentLocation.page = currentPage;
                        this.onLocationFound.next(this.currentLocation);
                    }
                });
            })
                .catch(() => {
                this.zone.run(() => {
                    this.computingPagination = false;
                    this.onErrorOccurred.emit(EpubError.COMPUTE_PAGINATION);
                });
            });
        });
    }
    /**
     * Loads metadata as output event
     * @return {?}
     */
    loadMetadata() {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.zone.runOutsideAngular(() => {
            this.epub.getMetadata()
                .then((metadata) => {
                this.zone.run(() => {
                    this.onMetadataLoaded.next(metadata);
                });
            })
                .catch(() => {
                this.zone.run(() => {
                    this.onErrorOccurred.emit(EpubError.LOAD_METADATA);
                });
            });
        });
    }
    /**
     * Loads table of contents as output event
     * @return {?}
     */
    loadTOC() {
        if (!this.documentReady) {
            this.onErrorOccurred.emit(EpubError.NOT_LOADED_DOCUMENT);
            return;
        }
        this.zone.runOutsideAngular(() => {
            this.epub.getToc()
                .then((chapters) => {
                this.zone.run(() => {
                    this.onTOCLoaded.next(chapters);
                });
            })
                .catch(() => {
                this.zone.run(() => {
                    this.onErrorOccurred.emit(EpubError.LOAD_TOC);
                });
            });
        });
    }
    /**
     * @return {?}
     */
    destroyEpub() {
        this.documentReady = false;
        this.isChapterDisplayed = false;
        this.searchingText = false;
        this.needSearchText = null;
        this.computingPagination = false;
        this.needComputePagination = false;
        this.currentLocation = {
            startCfi: null,
            endCfi: null,
            page: null,
            chapter: null
        };
        if (this.epub) {
            this.epub.destroy();
            this.epub = null;
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.linkSubscription) {
            this.linkSubscription.unsubscribe();
        }
        this.destroyEpub();
    }
}
AngularEpubViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-epub-viewer',
                template: `<div id="angularEpubViewerComponent" [style.padding]="padding" #angularEpubViewerComponent></div>`,
                styles: [`
        #angularEpubViewerComponent {
            width: 100%;
            height: 100%;
            margin: 0;
            overflow: hidden;
        }
    `],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
AngularEpubViewerComponent.ctorParameters = () => [
    { type: NgZone, },
];
AngularEpubViewerComponent.propDecorators = {
    "root": [{ type: ViewChild, args: ['angularEpubViewerComponent', { read: ElementRef },] },],
    "padding": [{ type: Input },],
    "autoPagination": [{ type: Input },],
    "autoMetadata": [{ type: Input },],
    "autoTOC": [{ type: Input },],
    "onDocumentReady": [{ type: Output, args: ['onDocumentReady',] },],
    "onChapterUnloaded": [{ type: Output, args: ['onChapterUnloaded',] },],
    "onChapterDisplayed": [{ type: Output, args: ['onChapterDisplayed',] },],
    "onLocationFound": [{ type: Output, args: ['onLocationFound',] },],
    "onSearchFinished": [{ type: Output, args: ['onSearchFinished',] },],
    "onPaginationComputed": [{ type: Output, args: ['onPaginationComputed',] },],
    "onMetadataLoaded": [{ type: Output, args: ['onMetadataLoaded',] },],
    "onTOCLoaded": [{ type: Output, args: ['onTOCLoaded',] },],
    "onErrorOccurred": [{ type: Output, args: ['onErrorOccurred',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularEpubViewerModule {
}
AngularEpubViewerModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [AngularEpubViewerComponent],
                exports: [AngularEpubViewerComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { AngularEpubViewerModule, AngularEpubViewerComponent, EpubError };
//# sourceMappingURL=angular-epub-viewer.js.map
